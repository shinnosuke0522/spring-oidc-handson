/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.issuemanager.presentation.api;

import com.example.issuemanager.presentation.model.Error;
import com.example.issuemanager.presentation.model.Member;
import java.util.UUID;
import com.example.issuemanager.presentation.model.ValidationError;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-12T03:11:22.970089+09:00[Asia/Tokyo]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "members", description = "manage members")
public interface MembersApi {

    /**
     * GET /projects/{project_id}/members : retrieve all
     * retrieve all
     *
     * @param projectId  (required)
     * @return succeeded (status code 200)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "projectsProjectIdMembersGet",
        summary = "retrieve all",
        description = "retrieve all",
        tags = { "members" },
        responses = {
            @ApiResponse(responseCode = "200", description = "succeeded", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Member.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/projects/{project_id}/members",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Member>> projectsProjectIdMembersGet(
        @Parameter(name = "project_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("project_id") UUID projectId
    );


    /**
     * DELETE /projects/{project_id}/members/{member_id} : Delete member from project
     * Deletes a specific member from a project.
     *
     * @param projectId  (required)
     * @param memberId  (required)
     * @return succeeded (status code 200)
     *         or Not Found (status code 404)
     *         or Unprocessable Entity (status code 422)
     */
    @Operation(
        operationId = "projectsProjectIdMembersMemberIdDelete",
        summary = "Delete member from project",
        description = "Deletes a specific member from a project.",
        tags = { "members" },
        responses = {
            @ApiResponse(responseCode = "200", description = "succeeded"),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/projects/{project_id}/members/{member_id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> projectsProjectIdMembersMemberIdDelete(
        @Parameter(name = "project_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("project_id") UUID projectId,
        @Parameter(name = "member_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("member_id") UUID memberId
    );


    /**
     * GET /projects/{project_id}/members/{member_id} : retrieve
     * retrieve
     *
     * @param projectId  (required)
     * @param memberId  (required)
     * @return succeeded (status code 200)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "projectsProjectIdMembersMemberIdGet",
        summary = "retrieve",
        description = "retrieve",
        tags = { "members" },
        responses = {
            @ApiResponse(responseCode = "200", description = "succeeded", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Member.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/projects/{project_id}/members/{member_id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Member> projectsProjectIdMembersMemberIdGet(
        @Parameter(name = "project_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("project_id") UUID projectId,
        @Parameter(name = "member_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("member_id") UUID memberId
    );


    /**
     * PUT /projects/{project_id}/members/{member_id} : update
     * update
     *
     * @param projectId  (required)
     * @param memberId  (required)
     * @param member  (optional)
     * @return succeeded (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "projectsProjectIdMembersMemberIdPut",
        summary = "update",
        description = "update",
        tags = { "members" },
        responses = {
            @ApiResponse(responseCode = "200", description = "succeeded"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ValidationError.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/projects/{project_id}/members/{member_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> projectsProjectIdMembersMemberIdPut(
        @Parameter(name = "project_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("project_id") UUID projectId,
        @Parameter(name = "member_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("member_id") UUID memberId,
        @Parameter(name = "Member", description = "") @Valid @RequestBody(required = false) Optional<Member> member
    );


    /**
     * POST /projects/{project_id}/members : register
     * register
     *
     * @param projectId  (required)
     * @param member  (optional)
     * @return succeeded (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Unprocessable Entity (status code 422)
     */
    @Operation(
        operationId = "projectsProjectIdMembersPost",
        summary = "register",
        description = "register",
        tags = { "members" },
        responses = {
            @ApiResponse(responseCode = "200", description = "succeeded", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Member.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ValidationError.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/projects/{project_id}/members",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Member> projectsProjectIdMembersPost(
        @Parameter(name = "project_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("project_id") UUID projectId,
        @Parameter(name = "Member", description = "") @Valid @RequestBody(required = false) Optional<Member> member
    );

}
