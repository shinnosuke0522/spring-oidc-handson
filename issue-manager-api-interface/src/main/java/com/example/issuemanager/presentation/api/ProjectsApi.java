/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.issuemanager.presentation.api;

import com.example.issuemanager.presentation.model.Error;
import com.example.issuemanager.presentation.model.Project;
import java.util.UUID;
import com.example.issuemanager.presentation.model.ValidationError;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-12T03:11:22.970089+09:00[Asia/Tokyo]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "projects", description = "manage projects")
public interface ProjectsApi {

    /**
     * GET /projects : list
     * retrieve all project where the user belongs
     *
     * @return succeeded (status code 200)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "projectsGet",
        summary = "list",
        description = "retrieve all project where the user belongs",
        tags = { "projects" },
        responses = {
            @ApiResponse(responseCode = "200", description = "succeeded", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Project.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/projects",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Project>> projectsGet(
        
    );


    /**
     * POST /projects : register
     * register project with members
     *
     * @param project  (optional)
     * @return succeeded (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unprocessable Entity (status code 422)
     */
    @Operation(
        operationId = "projectsPost",
        summary = "register",
        description = "register project with members",
        tags = { "projects" },
        responses = {
            @ApiResponse(responseCode = "200", description = "succeeded"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ValidationError.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/projects",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> projectsPost(
        @Parameter(name = "Project", description = "") @Valid @RequestBody(required = false) Optional<Project> project
    );


    /**
     * DELETE /projects/{project_id} : delete
     * delete
     *
     * @param projectId  (required)
     * @return succeeded (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Unprocessable Entity (status code 422)
     */
    @Operation(
        operationId = "projectsProjectIdDelete",
        summary = "delete",
        description = "delete",
        tags = { "projects" },
        responses = {
            @ApiResponse(responseCode = "200", description = "succeeded"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ValidationError.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/projects/{project_id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> projectsProjectIdDelete(
        @Parameter(name = "project_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("project_id") UUID projectId
    );


    /**
     * GET /projects/{project_id} : retrieve
     * retrieve
     *
     * @param projectId  (required)
     * @return succeeded (status code 200)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "projectsProjectIdGet",
        summary = "retrieve",
        description = "retrieve",
        tags = { "projects" },
        responses = {
            @ApiResponse(responseCode = "200", description = "succeeded", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Project.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/projects/{project_id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Project> projectsProjectIdGet(
        @Parameter(name = "project_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("project_id") UUID projectId
    );


    /**
     * PUT /projects/{project_id} : update
     * update
     *
     * @param projectId  (required)
     * @param project  (optional)
     * @return succeeded (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "projectsProjectIdPut",
        summary = "update",
        description = "update",
        tags = { "projects" },
        responses = {
            @ApiResponse(responseCode = "200", description = "succeeded"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ValidationError.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/projects/{project_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> projectsProjectIdPut(
        @Parameter(name = "project_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("project_id") UUID projectId,
        @Parameter(name = "Project", description = "") @Valid @RequestBody(required = false) Optional<Project> project
    );

}
